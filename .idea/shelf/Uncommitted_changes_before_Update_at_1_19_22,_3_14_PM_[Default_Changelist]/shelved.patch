Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision c86d2a503113fa9c9d356ce1849952f9aa46912a)
+++ b/.idea/misc.xml	(date 1642277796838)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/TestAuto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/TestAuto.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/TestAuto.java
new file mode 100644
--- /dev/null	(date 1642626784251)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/TestAuto.java	(date 1642626784251)
@@ -0,0 +1,133 @@
+package org.firstinspires.ftc.teamcode;
+
+import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
+import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
+import com.qualcomm.robotcore.hardware.DcMotor;
+import com.qualcomm.robotcore.util.ElapsedTime;
+import java.util.concurrent.TimeUnit;
+import java.util.Date;
+//hello
+
+@Autonomous(name = "HardwareAuto")
+public class TestAuto extends LinearOpMode {
+
+    HardwareOmni        bot = new HardwareOmni();
+
+
+
+    double pos = 0;
+    int r = 0;
+
+    double speed = 1;
+    private ElapsedTime     runtime = new ElapsedTime();
+
+
+
+    @Override
+    public void runOpMode() throws InterruptedException {
+        bot.init(hardwareMap);
+        bot.markus.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
+
+
+        waitForStart();
+
+
+        //functions that control the drive motors,
+        duckdrive(speed, 4000, 0, false, 0);//for reverse 0 is forwards 1 is backwards
+        duckdrive(speed, 0, 0, true,100);
+        duckdrive(speed, 8000, 1, false,0);
+        duckdrive(speed, 0, 0, false,0);
+        duckdrive(speed, 2000, 0, false,0);
+        duckdrive(speed, 2000, 1, false,0);
+
+
+
+
+
+        telemetry.addData("stop","");
+
+
+
+
+
+    }
+
+    private void duckdrive(double speed, int forward, int reverse, boolean duckwheel, double extrawait) {
+        bot.markus.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
+
+        bot.markus.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
+
+
+
+        if(reverse == 0) {
+            bot.markus.setTargetPosition(forward);
+        }
+        else if (reverse == 1){
+            bot.markus.setTargetPosition(forward*-1);
+        }
+
+
+
+        bot.markus.setMode(DcMotor.RunMode.RUN_TO_POSITION);
+
+
+        bot.markus.setPower(speed);
+
+        runtime.reset();
+
+        if(duckwheel){
+            bot.duck.setPower(1);
+        }
+        else {
+            bot.duck.setPower(0);
+        }
+
+
+        if (reverse == 0) {
+            while (pos < forward && runtime.seconds() < 10 && opModeIsActive()) {
+
+
+                pos = bot.markus.getCurrentPosition();
+                telemetry.addData("forward", "" + pos);
+                telemetry.addData("time", "" + runtime.seconds());
+
+
+                telemetry.update();
+
+            }
+
+
+        }
+        else if (reverse == 1){
+            while (pos > forward*-1 && runtime.seconds() < 10 && opModeIsActive()) {
+
+
+                pos = bot.markus.getCurrentPosition();
+                telemetry.addData("forward", "" + pos);
+                telemetry.addData("time", "" + runtime.seconds());
+
+
+                telemetry.update();
+            }
+        }
+
+
+        if (extrawait > 0){
+            runtime.reset();
+            while(extrawait < getRuntime()){
+                try {
+                    TimeUnit.SECONDS.sleep(7);
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+                extrawait = getRuntime()+1;
+                telemetry.addData("time",getRuntime());
+                telemetry.update();
+            }
+        }
+    }
+
+
+
+
+}
